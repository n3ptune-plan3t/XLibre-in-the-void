#!/bin/bash
#
# void-xvfb-run.sh:
# This script creates an XBPS template for xvfb-run on Void Linux.
# Review the template and script below and modify as needed.
#
# Copyright 2025 Adapted for Void Linux
#
# This script is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation; either version 3 of the License, or (at
# your option) any later version.
#
# This script is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this script; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
echo "This script will create XBPS template for xvfb-run on Void Linux."
echo
# Ensure user has sudo privileges
if ! sudo -v; then
  echo "This User does not have sudo privileges."
  echo "Install aborted!!"
  exit 1
fi
# Ensure supported CPU Architecture
arch=$(uname -m)
case "$arch" in
    x86_64) arch=64 ;;
    * ) echo "Unsupported CPU Architecture"
        echo "Install aborted!!"
        exit 2;;
esac
# Ensure this is Void Linux
if [ ! -f /etc/os-release ]; then
    echo "os-release file not found!"
    echo "Unsupported Distro."
    echo "Install aborted!!"
    exit 3
fi
# shellcheck disable=SC1091
. /etc/os-release
if [[ "$ID" != "void" ]]; then
  echo "Unsupported release: $NAME"
  echo "Install aborted!!"
  exit 4
fi
echo
read -r -p "Continue (y/n)? " choice
echo
case "$choice" in
  y|Y ) echo "Creating xvfb-run template ...";;
  n|N ) echo "Install aborted!!"
        exit 1;;
  * ) exit 255;;
esac
echo
sudo xbps-install -Syu
sudo xbps-install -y git base-devel
# the temp directory used to work
TEMP_DIR=$(mktemp -d)
# check if tmp dir was created
if ! [[ "$TEMP_DIR" ]]; then
  echo "Could not create temp dir"
  echo "Install aborted!!"
  exit 1
fi
# deletes the temp directory
function cleanup {
  rm -rf "$TEMP_DIR"
  echo "Deleted temp working directory $TEMP_DIR"
}
# ensure cleanup function is called on EXIT
trap cleanup EXIT
# Setup xbps-src
VOID_PKGS_DIR="$HOME/void-packages"
if [ ! -d "$VOID_PKGS_DIR" ]; then
  echo "Cloning void-packages..."
  git clone https://github.com/void-linux/void-packages.git "$VOID_PKGS_DIR"
fi
pushd "$VOID_PKGS_DIR" &>/dev/null || exit
./xbps-src binary-bootstrap
# Create xvfb-run template directory
mkdir -p srcpkgs/xvfb-run/files
# Create the template
cat > srcpkgs/xvfb-run/template << 'EOF'
# Template file for 'xvfb-run'
pkgname=xvfb-run
version=1.0.0
revision=1
short_desc="Run an X client in a virtual X server environment"
maintainer="Adapted for Void <you@example.com>"
license="GPL-2.0-or-later"
homepage="https://www.x.org"
depends="xorg-server xorg-xauth util-linux"
# No distfiles needed, script is in files/
do_install() {
  vinstall xvfb-run 755 usr/bin/xvfb-run
}
EOF
# Create the script file
cat > srcpkgs/xvfb-run/files/xvfb-run << 'EOF'
#!/bin/sh
# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
#
# T2 SDE: package/.../xorg-server/xvfb-run.sh
# Copyright (C) 2005 The T2 SDE Project
# Copyright (C) XXXX - 2005 Debian
#
# More information can be found in the files COPYING and README.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License. A copy of the
# GNU General Public License can be found in the file COPYING.
# --- T2-COPYRIGHT-NOTE-END ---
# from: http://necrotic.deadbeast.net/xsf/XFree86/trunk/debian/local/xvfb-run
# This script starts an instance of Xvfb, the "fake" X server, runs a command
# with that server available, and kills the X server when done. The return
# value of the command becomes the return value of this script.
#
# If anyone is using this to build a Debian package, make sure the package
# Build-Depends on xvfb, xbase-clients, and xfonts-base.
set -e
PROGNAME=xvfb-run
SERVERNUM=99
AUTHFILE=
ERRORFILE=/dev/null
STARTWAIT=3
XVFBARGS="-screen 0 640x480x24"
LISTENTCP="-nolisten tcp"
XAUTHPROTO=.
# Query the terminal to establish a default number of columns to use for
# displaying messages to the user. This is used only as a fallback in the event
# the COLUMNS variable is not set. ($COLUMNS can react to SIGWINCH while the
# script is running, and this cannot, only being calculated once.)
DEFCOLUMNS=$(stty size 2>/dev/null | awk '{print $2}') || true
if ! expr "$DEFCOLUMNS" : "[[:digit:]]\+$" >/dev/null 2>&1; then
    DEFCOLUMNS=80
fi
# Display a message, wrapping lines at the terminal width.
message () {
    echo "$PROGNAME: $*" | fmt -t -w ${COLUMNS:-$DEFCOLUMNS}
}
# Display an error message.
error () {
    message "error: $*" >&2
}
# Display a usage message.
usage () {
    if [ -n "$*" ]; then
        message "usage error: $*"
    fi
    cat <<EOF
Usage: $PROGNAME [OPTION ...] COMMAND
Run COMMAND (usually an X client) in a virtual X server environment.
Options:
-a --auto-servernum try to get a free server number, starting at
                                    --server-num (deprecated, use --auto-display
                                    instead)
-d --auto-display use the X server to find a display number
                                    automatically
-e FILE --error-file=FILE file used to store xauth errors and Xvfb
                                    output (default: $ERRORFILE)
-f FILE --auth-file=FILE file used to store auth cookie
                                    (default: ./.Xauthority)
-h --help display this usage message and exit
-n NUM --server-num=NUM server number to use (default: $SERVERNUM)
-l --listen-tcp enable TCP port listening in the X server
-p PROTO --xauth-protocol=PROTO X authority protocol name to use
                                    (default: xauth command's default)
-s ARGS --server-args=ARGS arguments (other than server number and
                                    "-nolisten tcp") to pass to the Xvfb server
                                    (default: "$XVFBARGS")
-w DELAY --wait=DELAY delay in seconds to wait for Xvfb to start
                                    before running COMMAND (default: $STARTWAIT)
EOF
}
# Find a free server number by looking at .X*-lock files in /tmp.
find_free_servernum() {
    # Sadly, the "local" keyword is not POSIX. Leave the next line commented in
    # the hope Debian Policy eventually changes to allow it in /bin/sh scripts
    # anyway.
    #local i
    i=$SERVERNUM
    while [ -f /tmp/.X$i-lock ]; do
        i=$(($i + 1))
    done
    echo $i
}
# Parse the command line.
ARGS=$(getopt --options +ade:f:hn:lp:s:w: \
       --long auto-servernum,auto-display,error-file:,auth-file:,help,server-num:,listen-tcp,xauth-protocol:,server-args:,wait: \
       --name "$PROGNAME" -- "$@")
GETOPT_STATUS=$?
if [ $GETOPT_STATUS -ne 0 ]; then
    error "internal error; getopt exited with status $GETOPT_STATUS"
    exit 6
fi
eval set -- "$ARGS"
while :; do
    case "$1" in
        -a|--auto-servernum) SERVERNUM=$(find_free_servernum) ;;
        -d|--auto-display) AUTO_DISPLAY=1 ;;
        -e|--error-file) ERRORFILE="$2"; shift ;;
        -f|--auth-file) AUTHFILE="$2"; shift ;;
        -h|--help) SHOWHELP="yes" ;;
        -n|--server-num) SERVERNUM="$2"; shift ;;
        -l|--listen-tcp) LISTENTCP="" ;;
        -p|--xauth-protocol) XAUTHPROTO="$2"; shift ;;
        -s|--server-args) XVFBARGS="$2"; shift ;;
        -w|--wait) STARTWAIT="$2"; shift ;;
        --) shift; break ;;
        *) error "internal error; getopt permitted \"$1\" unexpectedly"
           exit 6
           ;;
    esac
    shift
done
if [ "$SHOWHELP" ]; then
    usage
    exit 0
fi
if [ -z "$*" ]; then
    usage "need a command to run" >&2
    exit 2
fi
if ! type xauth >/dev/null; then
    error "xauth command not found"
    exit 3
fi
# Set up the temp dir for the pid and X authorization file
XVFB_RUN_TMPDIR="$(mktemp --directory --tmpdir $PROGNAME.XXXXXX)"
# If the user did not specify an X authorization file to use, set up a temporary
# directory to house one.
if [ -z "$AUTHFILE" ]; then
    AUTHFILE=$(mktemp -p "$XVFB_RUN_TMPDIR" Xauthority.XXXXXX)
fi
# Start Xvfb.
MCOOKIE=$(mcookie)
if [ -z "$AUTO_DISPLAY" ]; then
  # Old style using a pre-computed SERVERNUM
  XAUTHORITY=$AUTHFILE Xvfb ":$SERVERNUM" $XVFBARGS $LISTENTCP >>"$ERRORFILE" \
  2>&1 &
  XVFBPID=$!
else
  # New style using Xvfb to provide a free display
  PIDFILE=$(mktemp -p "$XVFB_RUN_TMPDIR" pid.XXXXXX)
  SERVERNUM=$(XAUTHORITY=$AUTHFILE Xvfb -displayfd 1 $XVFBARGS $LISTENTCP \
  2>"$ERRORFILE" & echo $! > $PIDFILE)
  XVFBPID=$(cat $PIDFILE)
fi
sleep "$STARTWAIT"
XAUTHORITY=$AUTHFILE xauth source - << EOF >>"$ERRORFILE" 2>&1
add :$SERVERNUM $XAUTHPROTO $MCOOKIE
EOF
# Start the command and save its exit status.
set +e
DISPLAY=:$SERVERNUM XAUTHORITY=$AUTHFILE "$@"
RETVAL=$?
set -e
# Kill Xvfb now that the command has exited.
kill $XVFBPID
# Clean up.
XAUTHORITY=$AUTHFILE xauth remove ":$SERVERNUM" >"$ERRORFILE" 2>&1
if [ -n "$XVFB_RUN_TMPDIR" ]; then
    if ! rm -r "$XVFB_RUN_TMPDIR"; then
        error "problem while cleaning up temporary directory"
        exit 5
    fi
fi
# Return the executed command's exit status.
exit $RETVAL
# vim:set ai et sts=4 sw=4 tw=80:
EOF
chmod +x srcpkgs/xvfb-run/files/xvfb-run
# Build and install xvfb-run
echo "Building xvfb-run..."
./xbps-src pkg xvfb-run || {
  echo "Failed to build xvfb-run"
  exit 1
}
sudo xbps-install --repository=hostdir/binpkgs xvfb-run || {
  echo "Failed to install xvfb-run"
  exit 1
}
popd &>/dev/null || exit
echo
echo "If there were no errors, xvfb-run was successfully built and installed"
echo "Note: This is a custom version based on the provided script. Void Linux may already have an xvfb-run package from xorg-server."
echo "You can check with: xbps-query -s xvfb-run"
