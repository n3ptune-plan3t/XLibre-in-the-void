name: Build XLibre Drivers

on:
  workflow_dispatch:

jobs:
  build:
    name: Build XLibre Drivers ðŸ“¦
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone void-packages
        run: git clone --depth=1 https://github.com/void-linux/void-packages.git

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y wget tar xz-utils ca-certificates

      - name: Download and install XBPS static binaries
        run: |
          wget https://repo-default.voidlinux.org/static/xbps-static-latest.x86_64-musl.tar.xz
          tar xvf xbps-static-latest.x86_64-musl.tar.xz
          sudo install -Dm755 usr/bin/* /usr/local/bin/

      - name: Cache XBPS hostdir
        id: cache-hostdir
        uses: actions/cache@v4
        with:
          path: void-packages/hostdir
          key: xbps-hostdir-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('void-packages/xbps-src', 'void-packages/common/bootstrap/**', 'void-packages/srcpkgs/*.template') }}

      - name: Bootstrap XBPS-src
        if: steps.cache-hostdir.outputs.cache-hit != 'true'
        working-directory: void-packages
        run: |
          export XBPS_ARCH=x86_64
          ./xbps-src binary-bootstrap

      - name: Copy templates
        run: |
          # Copy XLibre templates to void-packages
          mkdir -p void-packages/srcpkgs
          cp -r srcpkgs/* void-packages/srcpkgs/ 2>/dev/null || true

      - name: Allow restricted packages
        working-directory: void-packages
        run: echo XBPS_ALLOW_RESTRICTED=yes >> etc/conf

      # --- START OF CHANGES ---

      - name: Cache xlibre-xserver package
        id: cache-xserver
        uses: actions/cache@v4
        with:
          # Cache the built binary packages for xserver and its subpackages
          path: void-packages/hostdir/binpkgs/xlibre-xserver*.xbps
          # The cache key is based on the hash of the template file
          key: xserver-pkg-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('void-packages/srcpkgs/xlibre-xserver/template') }}

      - name: Build xlibre-xserver (if not cached)
        if: steps.cache-xserver.outputs.cache-hit != 'true'
        working-directory: void-packages
        run: |
          # Building the main package also builds its subpackages (-common, -devel)
          ./xbps-src pkg xlibre-xserver

      # --- END OF CHANGES ---

      - name: Build XLibre drivers
        working-directory: void-packages
        run: |
          for dir in srcpkgs/xlibre-xf86-*; do
            if [ -d "$dir" ]; then
              pkg=$(basename "$dir")
              echo "Building $pkg"
              # xbps-src will find the cached or newly built xserver dependency
              ./xbps-src pkg "$pkg" || {
                echo "Failed to build $pkg"
                exit 1
              }
            fi
          done

      - name: Upload built packages
        uses: actions/upload-artifact@v4
        with:
          name: xlibre-packages
          path: void-packages/hostdir/binpkgs/*.xbps

  release:
    name: Create GitHub Release ðŸš€
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download built packages
        uses: actions/download-artifact@v4
        with:
          name: xlibre-packages

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: "*.xbps"
          generate_release_notes: true
          tag_name: ${{ github.ref_name }}-${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
